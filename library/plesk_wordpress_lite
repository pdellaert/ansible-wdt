#!/usr/bin/python
# -*- coding: utf-8 -*-

DOCUMENTATION = '''
---
author: Philippe Dellaert
module: plesk_wordpress_lite
short_description: Maintains a custom wordpress setup in a Plesk environment
description: 
	- This module deploys a custom wordpress setup in a Plesk environment as part of the WDT (Webapp Deployment Tool, a Symfony 2 bundle to automate and keep track of webapp deployments).
version added: 0.1
options:
	vhost:
		description:
			- The vhost in Plesk for which the wordpress needs to be setup
		required: true
	admin_user:
		description:
			- The username of the adminitrative user in Plesk which has full access (and as whom the Plesk Subscription is set up)
		required: true
	db_name:
		description:
			- The database to which the application should be installed
		required: true
	db_username:
		description:
			- The username of the database user with full access to the database
		required: true
	db_password:
		description:
			- The password of the database user with full access to the database
		required: true
	db_host:
		description:
			- The hostname of the database server
		required: false
	git_repository:
		description:
			- The git repository from where the files should be cloned
		required: true
	git_branch:
		description:
			- The git branch from where the files should be cloned
		required: false
	git_username:
		description:
			- The username of the git user with read access to the git repository
			- If you do not provide a username, an anonymous request is used
		required: false
	git_password:
		description:
			- The password of the git user with read access to the git repository
			- If you do not provide a password, but do provide a username, a request with the default SSH of the user as whom ansible is being executed on the remote server, will be used.
		required: false
	wp_admin_username:
		description:
			- The Wordpress administrator username
		required: true
	wp_admin_password:
		description:
			- The Wordpress administrator password
		required: true
	wp_key_auth:
		description:
			- The Wordpress config auth key
		required: true
	wp_key_secure_auth:
		description:
			- The Wordpress config secure auth key
		required: true
	wp_key_logged_in:
		description:
			- The Wordpress config logged in key
		required: true
	wp_key_nonce:
		description:
			- The Wordpress config nonce key
		required: true
	wp_salt_auth:
		description:
			- The Wordpress config auth salt
		required: true
	wp_salt_secure_auth:
		description:
			- The Wordpress config secure auth salt
		required: true
	wp_salt_logged_in:
		description:
			- The Wordpress config logged in salt
		required: true
	wp_salt_nonce:
		description:
			- The Wordpress config nonce salt
		required: true
requirements: python-git, python-mysqldb
'''

import os
import re
import subprocess
try:
	import MySQLdb
except ImportError:
	mysqldb_found = False
else:
	mysqldb_found = True

# TODO new deployment: 
# Step 1: checkout data
# Step 2: edit config file
# Step 3: import database
# Step 4: remove install folder
# Step 5: chown folder
# Step 6: move files into place
# Step 7: clean up

# =============================================================================
# Module execution
#

def main():
	module = AnsibleModule(
		argument_spec = dict(
			vhost=dict(default=None, required=True),
			admin_user=dict(default=None, required=True),
			db_name=dict(default=None, required=True),
			db_username=dict(default=None, required=True),
			db_password=dict(default=None, required=True),
			db_host=dict(default='localhost', required=False),
			git_repository=dict(default=None, required=True),
			git_branch=dict(default='master', required=False),
			git_username=dict(default=None, required=False),
			git_password=dict(default=None, required=False),
			wp_admin_username=dict(default=None, required=True),
			wp_admin_password=dict(default=None, required=True),
			wp_key_auth=dict(default=None, required=True),
			wp_key_secure_auth=dict(default=None, required=True),
			wp_key_logged_in=dict(default=None, required=True),
			wp_key_nonce=dict(default=None, required=True),
			wp_salt_auth=dict(default=None, required=True),
			wp_salt_secure_auth=dict(default=None, required=True),
			wp_salt_logged_in=dict(default=None, required=True),
			wp_salt_nonce=dict(default=None, required=True),
		)
	)

	if not mysqldb_found:
		module.fail_json(msg='The Python MySQL module is required.')

	# Step 1: checkout data
	if not os.path.isdir('/var/www/vhosts/%s' % module.params['vhost']):
		module.fail_json(msg='vhost homefolder /var/www/vhosts/%s does not exist' % module.params['vhost'])
	if not os.path.exists('/tmp/%s' % module.params['vhost']):
		os.makedirs('/tmp/%s' % module.params['vhost'])
	
	try:
		subprocess.check_call(['git', 'clone', '-q', '%s@%s' % (module.params['git_username'],module.params['git_repository']), '/tmp/%s/base' %  module.params['vhost'], '-b', module.params['git_branch']])
	except subprocess.CalledProcessError as e:
		module.fail_json(msg='Git checkout failed with error: %s' % e.returncode)
	
	# Step 2: edit config file
	if not os.path.exists('/tmp/%s/base/wp-config-dist.php' % module.params['vhost']):
		module.fail_json(git_checkout=True,msg='Failed to locate wp-config-dist.php')

	replace_dict = dict({
		'%WP_ROOT_DIR%': '/var/www/vhosts/%s/httpdocs' % module.params['vhost'],
		'%WP_ROOT_URL%': 'http://%s' % module.params['vhost'],
		'%WP_DB_NAME%': module.params['db_name'],
		'%WP_DB_USER%': module.params['db_username'],
		'%WP_DB_PASSWORD%': module.params['db_password'],
		'%WP_DB_HOST%': module.params['db_host'],
		'%WP_KEY_AUTH%': module.params['wp_key_auth'],
		'%WP_KEY_SECURE_AUTH%': module.params['wp_key_secure_auth'],
		'%WP_KEY_LOGGED_IN%': module.params['wp_key_logged_in'],
		'%WP_KEY_NONCE%': module.params['wp_key_nonce'],
		'%WP_SALT_AUTH%': module.params['wp_salt_auth'],
		'%WP_SALT_SECURE_AUTH%': module.params['wp_salt_secure_auth'],
		'%WP_SALT_LOGGED_IN%': module.params['wp_salt_logged_in'],
		'%WP_SALT_NONCE%': module.params['wp_salt_nonce'],
	});

	with open('/tmp/%s/base/wp-config-dist.php' % module.params['vhost'], 'r') as distconf, open('/tmp/%s/base/wp-config.php' % module.params['vhost'], 'w') as conf:
		for line in distconf:
			for word in re.findall(r'%\w+%', line):
				if word in replace_dict:
					line = line.replace(word, replace_dict[word])
			conf.write(line)



	# Step 3: import DB


	module.exit_json(git_checkout=True,config_edit=True)



# this is magic, see lib/ansible/module_common.py
#<<INCLUDE_ANSIBLE_MODULE_COMMON>>
main()
